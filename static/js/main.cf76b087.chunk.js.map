{"version":3,"sources":["serviceWorker.ts","enums/enums.ts","types/types.ts","common/commonActions/commonActions.ts","common/createAppAsyncThunk/createAppAsyncThunk.ts","features/TodolistsList/Todolist/todokists.api.ts/todokists.api.ts","features/TodolistsList/Todolist/todolists-reducer.ts","components/AddItemForm/AddItemForm.tsx","features/TodolistsList/tasks/tasks.api.ts/tasks.api.ts","features/TodolistsList/tasks/tasks-reducer.ts","hooks/useAction.ts","features/TodolistsList/Todolist/FilterTaskButton/FilterTaskButton.tsx","components/EditableSpan/EditableSpan.tsx","features/TodolistsList/Todolist/Tasks/Task/Task.tsx","features/TodolistsList/tasks/tasks.selectors.ts","features/TodolistsList/Todolist/Tasks/Tasks.tsx","features/TodolistsList/Todolist/TodoListTitle/TodoListTitle.tsx","features/TodolistsList/Todolist/Todolist.tsx","features/TodolistsList/Todolist/todolists.selector.ts","features/Login/auth.selectors.ts","features/TodolistsList/Todolist/TodolistsList.tsx","app/app-reducer.ts","app/app.selectors.ts","components/ErrorSnackbar/ErrorSnackbar.tsx","features/Login/auth.api.ts/auth.api.ts","features/Login/auth-reducer.ts","features/Login/Login.tsx","app/App.tsx","app/store.ts","index.tsx","features/TodolistsList/Todolist/Tasks/Task/task.module.css"],"names":["Boolean","window","location","hostname","match","ResultCode","RequestStatus","TaskStatuses","TaskPriorities","FilterValuesType","commonActions","createAction","createAppAsyncThunk","createAsyncThunk","withTypes","instance","axios","create","baseURL","withCredentials","headers","todolistsAPI","get","title","post","id","delete","put","addTodolist","arg","a","rejectWithValue","res","data","resultCode","succeeded","todolist","item","value","showError","removeTodolist","dispatch","changeTodolistEntityStatusAC","todolistId","entityStatus","loading","fetchTodolists","todolists","changeTodolistTitle","console","log","slice","createSlice","name","initialState","reducers","changeTodolistFilterAC","state","action","indexTodo","findIndex","el","payload","filter","extraReducers","builder","addCase","fulfilled","todoIndex","unshift","all","idle","splice","map","todolistsReducer","reducer","actions","todoThunk","AddItemForm","memo","disabled","addItem","useState","setTitle","error","setError","addItemHandler","trim","then","catch","e","message","messages","TextField","variant","onChange","currentTarget","onKeyPress","charCode","label","helperText","IconButton","color","onClick","AddBox","tasksApi","taskId","taskTitile","model","fetchTasks","thunkAPI","tasks","items","removeTask","addTask","task","updateTask","getState","find","t","apiModel","deadline","description","priority","startDate","status","tasksReducer","taskIndex","todoListId","tasksIndex","forEach","tl","tasksThunk","useActions","useDispatch","useMemo","bindActionCreators","FilterTaskButton","onChangeFilterHandler","Button","active","completed","EditableSpan","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","Task","key","className","Completed","style","isDone","Checkbox","checked","New","newValue","Delete","selectTasks","Tasks","useSelector","tasksForTodolist","TodoListTitle","Todolist","demo","useEffect","unwrap","paddingTop","selectTodo","selectAuth","auth","isLoggedIn","TodolistsList","addTodolistThunk","Grid","container","justifyContent","padding","spacing","Paper","to","appInitialState","isInitialized","setAppStatusAC","setAppErrorAC","setInitializedAC","addMatcher","type","endsWith","failed","includes","meta","requestStatus","selectError","app","selectInitialized","selectStatus","Alert","props","elevation","ErrorSnackbar","handleClose","event","reason","isOpen","Snackbar","open","autoHideDuration","onClose","severity","authAPI","initializeApp","login","logout","authThunk","Login","formik","useFormik","validate","values","errors","password","length","email","test","initialValues","rememberMe","onSubmit","formikHelpers","fieldsErrors","setFieldError","field","justify","xs","handleSubmit","FormControl","FormLabel","href","target","FormGroup","margin","getFieldProps","touched","FormControlLabel","control","App","AppBar","position","Toolbar","edge","aria-label","Menu","Typography","LinearProgress","Container","fixed","exact","path","render","top","textAlign","width","CircularProgress","rootReducer","combineReducers","appReducer","authReducer","store","configureStore","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.cf76b087.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export enum ResultCode {\r\n    succeeded = 0,\r\n    failed = 1\r\n}\r\nexport enum RequestStatus {\r\n    idle = 'idle',\r\n    loading = 'loading',\r\n    succeeded = 'succeeded',\r\n    failed = 'failed'\r\n}\r\nexport enum TaskStatuses {\r\n    New = 0,\r\n    InProgress = 1,\r\n    Completed = 2,\r\n    Draft = 3\r\n}\r\nexport enum TaskPriorities {\r\n    Low = 0,\r\n    Middle = 1,\r\n    Hi = 2,\r\n    Urgently = 3,\r\n    Later = 4\r\n}","export type FieldsErrorsType = {\r\n    field:string\r\n    error:string\r\n}\r\nexport type ResponseDataType<D = {}> = {\r\n    resultCode: number\r\n    messages: Array<string>\r\n    data: D\r\n    fieldsErrors:FieldsErrorsType[]\r\n}\r\nexport enum FilterValuesType {\r\n    all = 'all',\r\n    active = 'active',\r\n    completed = 'completed'\r\n}","import {createAction} from \"@reduxjs/toolkit\";\r\n\r\nexport const commonActions = createAction('common/todoList-and-tasks')","import {createAsyncThunk} from \"@reduxjs/toolkit\";\r\nimport {AppDispatch, AppRootStateType} from \"app/store\";\r\nimport {ResponseDataType} from \"types/types\";\r\n\r\n\r\nexport const createAppAsyncThunk = createAsyncThunk.withTypes<{\r\n    state: AppRootStateType\r\n    dispatch: AppDispatch\r\n    rejectValue: null | unknown | RejectErrors\r\n\r\n}>()\r\n\r\ntype RejectErrors = {\r\n    showError:boolean\r\n    value:ResponseDataType\r\n\r\n}","import axios, {AxiosResponse} from 'axios'\r\nimport {FilterValuesType, ResponseDataType} from \"types/types\";\r\nimport {RequestStatus} from \"enums/enums\";\r\n\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://social-network.samuraijs.com/api/1.1/',\r\n    withCredentials: true,\r\n    headers: {\r\n        'API-KEY': '1cdd9f77-c60e-4af5-b194-659e4ebd5d41'\r\n    }\r\n})\r\n\r\n// api\r\nexport const todolistsAPI = {\r\n    getTodolists() {\r\n        return instance.get<TodolistType[]>('todo-lists');\r\n    },\r\n    createTodolist(title: string): Promise<AxiosResponse<ResponseDataType<{ item: TodolistType }>>> {\r\n        return instance.post<ResponseDataType<{ item: TodolistType }>>('todo-lists', {title: title});\r\n    },\r\n    deleteTodolist(id: string) {\r\n        return instance.delete<ResponseDataType>(`todo-lists/${id}`);\r\n    },\r\n    updateTodolist(id: string, title: string) {\r\n        return instance.put<ResponseDataType>(`todo-lists/${id}`, {title: title});\r\n    },\r\n\r\n}\r\n\r\n//types\r\nexport type TodolistType = {\r\n    id: string\r\n    title: string\r\n    addedDate: string\r\n    order: number\r\n}\r\nexport type TodolistDomainType = TodolistType & {\r\n    filter: FilterValuesType\r\n    entityStatus: RequestStatus\r\n}\r\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {commonActions} from \"common/commonActions/commonActions\";\r\nimport {createAppAsyncThunk} from \"common/createAppAsyncThunk/createAppAsyncThunk\";\r\nimport {TodolistDomainType, todolistsAPI, TodolistType} from \"./todokists.api.ts/todokists.api\";\r\nimport {RequestStatus, ResultCode} from \"enums/enums\";\r\nimport {FilterValuesType} from \"types/types\";\r\n\r\n\r\nconst addTodolist = createAppAsyncThunk<{ todolist: TodolistType }, { title: string }>\r\n('todolists/addTodolist', async (arg, {rejectWithValue}) => {\r\n\r\n        const res = await todolistsAPI.createTodolist(arg.title)\r\n        if (res.data.resultCode === ResultCode.succeeded) {\r\n            return {todolist: res.data.data.item}\r\n        } else {\r\n            return rejectWithValue({value:res.data, showError:false})\r\n        }\r\n})\r\n\r\nconst removeTodolist = createAppAsyncThunk<{ todolistId: string }, { todolistId: string }>\r\n('todolists/removeTodolist', async (arg, {dispatch}) => {\r\n        dispatch(changeTodolistEntityStatusAC({id: arg.todolistId, entityStatus: RequestStatus.loading}))\r\n        const res = await todolistsAPI.deleteTodolist(arg.todolistId)\r\n        return {todolistId: arg.todolistId}\r\n})\r\n\r\nconst fetchTodolists = createAppAsyncThunk<{ todolists: TodolistType[] }>\r\n('todolists/fetchTodolists', async (arg) => {\r\n        const res = await todolistsAPI.getTodolists()\r\n        return {todolists: res.data}\r\n})\r\n\r\nconst changeTodolistTitle = createAppAsyncThunk<{ todolistId: string, title: string }, { todolistId: string, title: string }>\r\n('todolists/changeTodolistTitle', async (arg, {rejectWithValue}) => {\r\n\r\n    const res = await todolistsAPI.updateTodolist(arg.todolistId, arg.title)\r\n    console.log(res)\r\n    if(res.data.resultCode === ResultCode.succeeded) {\r\n        return {todolistId: arg.todolistId, title: arg.title}\r\n    }\r\n    else return rejectWithValue({value: res.data, showError:true})\r\n\r\n})\r\n\r\nconst todoInitialState: Array<TodolistDomainType> = []\r\n\r\nexport const slice = createSlice({\r\n    name: 'todolists',\r\n    initialState: todoInitialState,\r\n    reducers: {\r\n        changeTodolistFilterAC(state, action: PayloadAction<{ id: string, filter: FilterValuesType }>) {\r\n            const indexTodo = state.findIndex(el => el.id === action.payload.id)\r\n            if (indexTodo !== -1) {\r\n                state[indexTodo].filter = action.payload.filter\r\n            }\r\n        },\r\n        changeTodolistEntityStatusAC(state, action: PayloadAction<{ id: string, entityStatus: RequestStatus }>) {\r\n            const indexTodo = state.findIndex(el => el.id === action.payload.id)\r\n            if (indexTodo !== -1) {\r\n                state[indexTodo].entityStatus = action.payload.entityStatus\r\n            }\r\n        },\r\n    },\r\n    extraReducers(builder) {\r\n        builder\r\n            .addCase(changeTodolistTitle.fulfilled, (state, action) => {\r\n                const todoIndex = state.findIndex(el => el.id === action.payload.todolistId)\r\n                if (todoIndex !== -1) state[todoIndex].title = action.payload.title\r\n            })\r\n            .addCase(addTodolist.fulfilled, (state, action) => {\r\n                state.unshift({\r\n                    ...action.payload.todolist,\r\n                    filter: FilterValuesType.all,\r\n                    entityStatus: RequestStatus.idle\r\n                })\r\n            })\r\n            .addCase(removeTodolist.fulfilled, (state, action) => {\r\n                const todoIndex = state.findIndex(el => el.id === action.payload.todolistId)\r\n                if (todoIndex !== -1) state.splice(todoIndex, 1)\r\n            })\r\n            .addCase(fetchTodolists.fulfilled, (state, action) => {\r\n                return action.payload.todolists.map(el => ({\r\n                    ...el,\r\n                    filter: FilterValuesType.all,\r\n                    entityStatus: RequestStatus.idle\r\n                }))\r\n            })\r\n            .addCase(commonActions, () => {\r\n                return []\r\n            })\r\n    }\r\n})\r\nexport const todolistsReducer = slice.reducer\r\nexport const {\r\n    changeTodolistFilterAC,\r\n    changeTodolistEntityStatusAC,\r\n} = slice.actions\r\nexport const todoThunk = {fetchTodolists, removeTodolist, addTodolist, changeTodolistTitle}\r\n\r\n\r\n\r\n\r\n","import React, {ChangeEvent, FC, KeyboardEvent, memo, useState} from 'react';\r\nimport {IconButton, TextField} from '@material-ui/core';\r\nimport {AddBox} from '@material-ui/icons';\r\n\r\ntype Props = {\r\n    addItem: (title: string) => Promise<any>\r\n    disabled?: boolean\r\n}\r\n\r\nexport const AddItemForm: FC<Props> = memo(({disabled = false, addItem}) => {\r\n    let [title, setTitle] = useState(\"\")\r\n    let [error, setError] = useState<string | null>(null)\r\n\r\n    const addItemHandler = () => {\r\n        if (title.trim() !== \"\") {\r\n            addItem(title)\r\n                .then(() => {\r\n                    setTitle(\"\")\r\n                })\r\n                .catch((e) => {\r\n                    if (e.message) return\r\n                    else if (!e.showError) {\r\n                        setError(e.value.messages[0])\r\n                    }\r\n                })\r\n        } else {\r\n            setError(\"Title is required\")\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n        setError(null)\r\n    }\r\n\r\n    const onKeyPressHandler = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        if (error !== null) {\r\n            setError(null);\r\n        } else if (e.charCode === 13) {\r\n            addItemHandler();\r\n        }\r\n    }\r\n\r\n\r\n    return <div>\r\n        <TextField\r\n            variant=\"outlined\"\r\n            disabled={disabled}\r\n            error={!!error}\r\n            value={title}\r\n            onChange={onChangeHandler}\r\n            onKeyPress={onKeyPressHandler}\r\n            label=\"Title\"\r\n            helperText={error}\r\n        />\r\n        <IconButton color=\"primary\" onClick={addItemHandler} disabled={disabled}>\r\n            <AddBox/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import {instance} from \"../../Todolist/todokists.api.ts/todokists.api\";\r\nimport {TaskPriorities, TaskStatuses} from \"enums/enums\";\r\nimport {ResponseDataType} from \"types/types\";\r\n\r\n// api\r\nexport const tasksApi = {\r\n    getTasks(todolistId: string) {\r\n        return instance.get<GetTasksResponse>(`todo-lists/${todolistId}/tasks`);\r\n    },\r\n    deleteTask(todolistId: string, taskId: string) {\r\n        return instance.delete<ResponseType>(`todo-lists/${todolistId}/tasks/${taskId}`);\r\n    },\r\n    createTask(todolistId: string, taskTitile: string) {\r\n        return instance.post<ResponseDataType<{ item: TaskType }>>(`todo-lists/${todolistId}/tasks`, {title: taskTitile});\r\n    },\r\n    updateTask(todolistId: string, taskId: string, model: UpdateDomainTaskModelType) {\r\n        return instance.put<ResponseDataType<TaskType>>(`todo-lists/${todolistId}/tasks/${taskId}`, model);\r\n    },\r\n}\r\n\r\n//types\r\nexport type TasksStateType = {\r\n    [key: string]: Array<TaskType>\r\n}\r\nexport type UpdateTaskType = {\r\n    taskId: string\r\n    model: UpdateDomainTaskModelType\r\n    todolistId: string\r\n}\r\nexport type TaskType = {\r\n    description: string\r\n    title: string\r\n    status: TaskStatuses\r\n    priority: TaskPriorities\r\n    startDate: string\r\n    deadline: string\r\n    id: string\r\n    todoListId: string\r\n    order: number\r\n    addedDate: string\r\n}\r\nexport type UpdateDomainTaskModelType = {\r\n    title?: string\r\n    description?: string\r\n    status?: TaskStatuses\r\n    priority?: TaskPriorities\r\n    startDate?: string\r\n    deadline?: string\r\n}\r\ntype GetTasksResponse = {\r\n    error: string | null\r\n    totalCount: number\r\n    items: TaskType[]\r\n}","import {createSlice} from \"@reduxjs/toolkit\";\r\nimport {commonActions} from \"common/commonActions/commonActions\";\r\nimport {createAppAsyncThunk} from \"common/createAppAsyncThunk/createAppAsyncThunk\";\r\nimport {todoThunk} from \"../Todolist/todolists-reducer\";\r\nimport {tasksApi, TasksStateType, TaskType, UpdateDomainTaskModelType, UpdateTaskType} from \"./tasks.api.ts/tasks.api\";\r\nimport {ResultCode} from \"enums/enums\";\r\n\r\nconst fetchTasks = createAppAsyncThunk<{ tasks: TaskType[], todolistId: string }, { todolistId: string }>\r\n('tasks/fetchTasks', async (arg, thunkAPI) => {\r\n        const res = await tasksApi.getTasks(arg.todolistId)\r\n        const tasks = res.data.items\r\n        return {tasks, todolistId: arg.todolistId}\r\n\r\n})\r\nconst removeTask = createAppAsyncThunk<{ todolistId: string, taskId: string }, { todolistId: string, taskId: string }>\r\n('tasks/removeTask', async (arg) => {\r\n        const res = await tasksApi.deleteTask(arg.todolistId, arg.taskId)\r\n        return {todolistId: arg.todolistId, taskId: arg.taskId}\r\n\r\n})\r\nconst addTask = createAppAsyncThunk<{ task: TaskType }, { title: string, todolistId: string }>\r\n('tasks/addTask',  async (arg, {rejectWithValue}) => {\r\n        const res = await tasksApi.createTask(arg.todolistId, arg.title)\r\n        if (res.data.resultCode === ResultCode.succeeded) {\r\n            const task = res.data.data.item\r\n            return {task}\r\n        } else {\r\n            return rejectWithValue({value:res.data, showError:false})\r\n        }\r\n})\r\n\r\nconst updateTask = createAppAsyncThunk<UpdateTaskType, UpdateTaskType>\r\n('tasks/updateTask', async (arg,{getState, dispatch, rejectWithValue}) => {\r\n        const state = getState()\r\n        const task = state.tasks[arg.todolistId].find(t => t.id === arg.taskId)\r\n        if (!task) {\r\n            console.log('The task was not found in the state')\r\n            return rejectWithValue({value:null, showError:true})\r\n        }\r\n        const apiModel: UpdateDomainTaskModelType = {\r\n            deadline: task.deadline,\r\n            description: task.description,\r\n            priority: task.priority,\r\n            startDate: task.startDate,\r\n            title: task.title,\r\n            status: task.status,\r\n            ...arg.model\r\n        }\r\n\r\n        const res = await tasksApi.updateTask(arg.todolistId, arg.taskId, apiModel)\r\n\r\n        if (res.data.resultCode === ResultCode.succeeded) {\r\n            return arg\r\n        } else {\r\n            return rejectWithValue({value:res.data, showError:true})\r\n        }\r\n\r\n})\r\n\r\n\r\nconst tasksInitialState: TasksStateType = {}\r\n\r\nconst slice = createSlice({\r\n    name: 'tasks',\r\n    initialState: tasksInitialState,\r\n    reducers: {},\r\n    extraReducers(builder) {\r\n        builder\r\n            .addCase(updateTask.fulfilled, (state, action) => {\r\n                const task = state[action.payload.todolistId]\r\n                const taskIndex = task.findIndex(el => el.id === action.payload.taskId)\r\n                if (taskIndex !== -1) task[taskIndex] = {...task[taskIndex], ...action.payload.model}\r\n            })\r\n            .addCase(addTask.fulfilled, (state, action) => {\r\n                state[action.payload.task.todoListId].unshift(action.payload.task)\r\n            })\r\n            .addCase(removeTask.fulfilled, (state, action) => {\r\n                const tasks = state[action.payload.todolistId]\r\n                const tasksIndex = tasks.findIndex(el => el.id === action.payload.taskId)\r\n                if (tasksIndex !== -1) tasks.splice(tasksIndex, 1)\r\n            })\r\n            .addCase(fetchTasks.fulfilled, (state, action) => {\r\n                state[action.payload.todolistId] = action.payload.tasks\r\n            })\r\n            .addCase(commonActions, () => {\r\n                return {}\r\n            })\r\n            .addCase(todoThunk.addTodolist.fulfilled, (state, action) => {\r\n                state[action.payload.todolist.id] = []\r\n            })\r\n            .addCase(todoThunk.removeTodolist.fulfilled, (state, action) => {\r\n                delete state[action.payload.todolistId]\r\n            })\r\n            .addCase(todoThunk.fetchTodolists.fulfilled, (state, action) => {\r\n                action.payload.todolists.forEach(tl => {\r\n                    state[tl.id] = []\r\n                })\r\n            })\r\n    }\r\n})\r\nexport const tasksReducer = slice.reducer\r\nexport const tasksThunk = {fetchTasks, removeTask, addTask, updateTask}\r\n\r\n\r\n","import { ActionCreator, ActionCreatorsMapObject, AsyncThunk, bindActionCreators, } from '@reduxjs/toolkit';\r\nimport { useMemo } from 'react';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {AppDispatch} from \"app/store\";\r\n\r\n\r\nexport const useActions = <Actions extends ActionCreatorsMapObject = ActionCreatorsMapObject>\r\n(actions: Actions): BoundActions<Actions> => {\r\n\r\n    const dispatch = useDispatch<AppDispatch>();\r\n    return useMemo(() => bindActionCreators(actions, dispatch), []);\r\n}\r\n\r\n// Types\r\ntype BoundActions<Actions extends ActionCreatorsMapObject> = {\r\n    [key in keyof Actions]: Actions[key] extends AsyncThunk<any, any, any>\r\n        ? BoundAsyncThunk<Actions[key]>\r\n        : Actions[key];\r\n};\r\n\r\ntype BoundAsyncThunk<Action extends ActionCreator<any>> = (\r\n    ...args: Parameters<Action>\r\n) => ReturnType<ReturnType<Action>>;\r\n","import React, {FC, memo} from \"react\";\r\nimport {Button} from \"@material-ui/core\";\r\nimport {FilterValuesType} from \"types/types\";\r\nimport {useActions} from \"hooks/useAction\";\r\nimport {slice} from \"../todolists-reducer\";\r\nimport {TodolistDomainType} from \"../todokists.api.ts/todokists.api\";\r\n\r\n\r\ntype Props = {\r\n    todolist: TodolistDomainType\r\n}\r\n\r\nexport const FilterTaskButton:FC<Props> = memo(({todolist}) => {\r\n    const {changeTodolistFilterAC} = useActions(slice.actions)\r\n\r\n    const onChangeFilterHandler = (filter:FilterValuesType) => {\r\n        changeTodolistFilterAC({id: todolist.id, filter})\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Button variant={todolist.filter === 'all' ? 'outlined' : 'text'}\r\n                    onClick={() => onChangeFilterHandler(FilterValuesType.all)}\r\n                    color={'default'}\r\n            >All\r\n            </Button>\r\n            <Button variant={todolist.filter === 'active' ? 'outlined' : 'text'}\r\n                    onClick={() => onChangeFilterHandler(FilterValuesType.active)}\r\n                    color={'primary'}>Active\r\n            </Button>\r\n            <Button variant={todolist.filter === 'completed' ? 'outlined' : 'text'}\r\n                    onClick={() => onChangeFilterHandler(FilterValuesType.completed)}\r\n                    color={'secondary'}>Completed\r\n            </Button>\r\n        </>\r\n    )\r\n})","import React, {ChangeEvent, FC, memo, useState} from 'react'\r\nimport {TextField} from '@material-ui/core'\r\n\r\ntype Props = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n}\r\n\r\nexport const EditableSpan:FC<Props> = memo(({value, onChange}) => {\r\n\r\n    console.log(\"EditableSpan called\");\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [title, setTitle] = useState(value)\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n        setTitle(value)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        onChange(title)\r\n    }\r\n    const changeTitle = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setTitle(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={title} onChange={changeTitle} autoFocus onBlur={activateViewMode}/>\r\n        : <span onDoubleClick={activateEditMode}>{value}</span>\r\n})\r\n","import React, {ChangeEvent, FC, memo} from 'react'\r\nimport {Checkbox, IconButton} from '@material-ui/core'\r\nimport {EditableSpan} from 'components/EditableSpan/EditableSpan'\r\nimport {Delete} from '@material-ui/icons'\r\nimport {TaskType} from \"../../../tasks/tasks.api.ts/tasks.api\"\r\nimport {TaskStatuses} from \"enums/enums\"\r\nimport {useActions} from \"hooks/useAction\"\r\nimport {tasksThunk} from \"../../../tasks/tasks-reducer\"\r\nimport style from \"./task.module.css\"\r\n\r\ntype Props = {\r\n    task: TaskType\r\n}\r\nexport const Task: FC<Props> = memo(({task}) => {\r\n    console.log('task')\r\n    const {removeTask, updateTask} = useActions(tasksThunk)\r\n    const onRemoveTask = () => removeTask({taskId: task.id, todolistId: task.todoListId})\r\n\r\n    const onChangeTaskStatus = (e: ChangeEvent<HTMLInputElement>) => {\r\n        updateTask({\r\n            taskId:task.id,\r\n            todolistId: task.todoListId,\r\n            model: {status: e.currentTarget.checked ? TaskStatuses.Completed : TaskStatuses.New}\r\n        })\r\n    }\r\n\r\n    const onChangeTaskTitle = (newValue: string) => updateTask({\r\n        taskId: task.id,\r\n        todolistId: task.todoListId,\r\n        model: {title: newValue}\r\n    })\r\n\r\n    return <div key={task.id} className={task.status === TaskStatuses.Completed ? style.isDone  : ''}>\r\n        <Checkbox\r\n            checked={task.status === TaskStatuses.Completed}\r\n            color=\"primary\"\r\n            onChange={onChangeTaskStatus}\r\n        />\r\n\r\n        <EditableSpan value={task.title} onChange={onChangeTaskTitle}/>\r\n        <IconButton onClick={onRemoveTask}>\r\n            <Delete/>\r\n        </IconButton>\r\n    </div>\r\n})\r\n","import {AppRootStateType} from \"app/store\";\r\n\r\nexport const selectTasks = (state:AppRootStateType)=> state.tasks","import React, {FC, memo} from \"react\";\r\nimport {Task} from \"./Task/Task\";\r\nimport {TaskType} from \"../../tasks/tasks.api.ts/tasks.api\";\r\nimport {TaskStatuses} from \"enums/enums\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {selectTasks} from \"../../tasks/tasks.selectors\";\r\nimport {TodolistDomainType} from \"../todokists.api.ts/todokists.api\";\r\n\r\ntype Props = {\r\n    todolist: TodolistDomainType\r\n}\r\n\r\nexport const Tasks:FC<Props> = memo(({todolist}) => {\r\n    const tasks = useSelector(selectTasks)\r\n\r\n    let tasksForTodolist:TaskType[] = tasks[todolist.id]\r\n\r\n    if (todolist.filter === 'active') {\r\n        tasksForTodolist = tasks[todolist.id].filter(t => t.status === TaskStatuses.New)\r\n    }\r\n    if (todolist.filter === 'completed') {\r\n        tasksForTodolist = tasks[todolist.id].filter(t => t.status === TaskStatuses.Completed)\r\n    }\r\n    return (\r\n        <>\r\n            {\r\n                tasksForTodolist?.map(t => <Task key={t.id} task={t}/>)\r\n            }\r\n        </>\r\n    )\r\n})","import React, {FC} from \"react\";\r\nimport {EditableSpan} from \"../../../../components/EditableSpan/EditableSpan\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport {Delete} from \"@material-ui/icons\";\r\nimport {TodolistDomainType} from \"../todokists.api.ts/todokists.api\";\r\nimport {useActions} from \"hooks/useAction\";\r\nimport {todoThunk} from \"../todolists-reducer\";\r\n\r\ntype Props = {\r\n    todolist: TodolistDomainType\r\n}\r\n\r\nexport const TodoListTitle:FC<Props> = ({todolist}) => {\r\n    const {removeTodolist, changeTodolistTitle} = useActions(todoThunk)\r\n\r\n    const removeTodo = () => removeTodolist({todolistId: todolist.id})\r\n    const changeTodoTitle = (title: string) => changeTodolistTitle({todolistId: todolist.id, title})\r\n    return (\r\n        <h3>\r\n            <EditableSpan value={todolist.title} onChange={changeTodoTitle}/>\r\n            <IconButton onClick={removeTodo} disabled={todolist.entityStatus === 'loading'}>\r\n                <Delete/>\r\n            </IconButton>\r\n        </h3>\r\n    )\r\n}\r\n","import React, {FC, memo, useEffect} from 'react'\r\nimport {AddItemForm} from 'components/AddItemForm/AddItemForm'\r\nimport {tasksThunk} from '../tasks/tasks-reducer'\r\nimport {useActions} from \"hooks/useAction\";\r\nimport {TodolistDomainType} from \"./todokists.api.ts/todokists.api\";\r\nimport {FilterTaskButton} from \"./FilterTaskButton/FilterTaskButton\";\r\nimport {Tasks} from \"./Tasks/Tasks\";\r\nimport {TodoListTitle} from \"./TodoListTitle/TodoListTitle\";\r\n\r\ntype Props = {\r\n    todolist: TodolistDomainType\r\n    demo?: boolean\r\n}\r\n\r\nexport const Todolist:FC<Props> = memo( ({demo = false,todolist }) =>{\r\n    console.log('Todolist called')\r\n\r\n    const {fetchTasks, addTask} = useActions(tasksThunk)\r\n\r\n    useEffect(() => {\r\n        if (demo) {\r\n            return\r\n        }\r\n        fetchTasks({todolistId: todolist.id})\r\n    }, [])\r\n\r\n    const addTaskProps = (title: string) => {\r\n        return addTask({title, todolistId: todolist.id}).unwrap()\r\n    }\r\n\r\n    return <div>\r\n        <TodoListTitle todolist={todolist}/>\r\n        <AddItemForm addItem={addTaskProps} disabled={todolist.entityStatus === 'loading'}/>\r\n        <Tasks todolist={todolist}/>\r\n        <div style={{paddingTop: '10px'}}>\r\n        <FilterTaskButton todolist={todolist}/>\r\n        </div>\r\n    </div>\r\n})\r\n\r\n\r\n","import {AppRootStateType} from \"app/store\";\r\n\r\nexport const selectTodo = (state:AppRootStateType) => state.todolists","import {AppRootStateType} from \"app/store\";\r\n\r\nexport const selectAuth = (state:AppRootStateType) => state.auth.isLoggedIn","import React, {FC, useEffect} from 'react'\r\nimport {useSelector} from 'react-redux'\r\n\r\nimport {\r\n    todoThunk,\r\n} from './todolists-reducer'\r\nimport {Grid, Paper} from '@material-ui/core'\r\nimport {AddItemForm} from 'components/AddItemForm/AddItemForm'\r\nimport {Todolist} from './Todolist'\r\nimport {Redirect} from 'react-router-dom'\r\nimport {selectTodo} from \"features/TodolistsList/Todolist/todolists.selector\"\r\nimport {selectAuth} from \"features/Login/auth.selectors\"\r\nimport {useActions} from \"hooks/useAction\"\r\n\r\ntype Props = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const TodolistsList: FC<Props> = ({demo = false}) => {\r\n    const todolists = useSelector(selectTodo)\r\n    const isLoggedIn = useSelector(selectAuth)\r\n\r\n    const {\r\n        fetchTodolists,\r\n        addTodolist: addTodolistThunk,\r\n    } = useActions(todoThunk)\r\n\r\n    useEffect(() => {\r\n        if (demo || !isLoggedIn) {\r\n            return;\r\n        }\r\n        fetchTodolists()\r\n    }, [])\r\n\r\n    const addTodolist = (title: string) => {\r\n        return addTodolistThunk({title}).unwrap()\r\n    }\r\n\r\n    if (!isLoggedIn) {\r\n        return <Redirect to={\"/login\"}/>\r\n    }\r\n\r\n    return <>\r\n        <Grid container style={{justifyContent:'center', padding: '30px'}}>\r\n            <AddItemForm addItem={addTodolist}/>\r\n        </Grid>\r\n        <Grid container spacing={3} style={{justifyContent:'center'}} >\r\n            {\r\n                todolists.map(tl => {\r\n                    return <Grid item key={tl.id}>\r\n                        <Paper style={{padding: '10px'}}>\r\n                            <Todolist\r\n                                todolist={tl}\r\n                                demo={demo}\r\n                            />\r\n                        </Paper>\r\n                    </Grid>\r\n                })\r\n            }\r\n        </Grid>\r\n    </>\r\n}\r\n","import {createSlice, PayloadAction} from \"@reduxjs/toolkit\";\r\nimport {RequestStatus} from \"enums/enums\";\r\n\r\n\r\nconst appInitialState = {\r\n    status: RequestStatus.idle,\r\n    error: null as null | string,\r\n    isInitialized: false\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'app',\r\n    initialState: appInitialState,\r\n    reducers: {\r\n        setAppStatusAC(state, action: PayloadAction<{ status: RequestStatus }>) {\r\n            state.status = action.payload.status\r\n        },\r\n        setAppErrorAC(state, action: PayloadAction<{ error: null | string }>) {\r\n            state.error = action.payload.error\r\n        },\r\n        setInitializedAC(state, action: PayloadAction<{ isInitialized: boolean }>) {\r\n            state.isInitialized = action.payload.isInitialized\r\n        }\r\n\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder\r\n            .addMatcher(\r\n                (action) => {\r\n                    return action.type.endsWith('/pending')\r\n                },\r\n                (state) => {\r\n                    state.status = RequestStatus.loading\r\n                })\r\n            .addMatcher(\r\n                (action) => {\r\n                    return action.type.endsWith('/rejected')\r\n                },\r\n                (state, action) => {\r\n                    if (action.payload) {\r\n                        if (action.payload.showError) {\r\n                            state.error = action.payload.value ? action.payload.value.messages[0] : 'Some error occurred'\r\n                        }\r\n                    } else {\r\n                        state.error = action.error ? action.error.message : 'Some error occurred'\r\n                    }\r\n                    state.status = RequestStatus.failed\r\n                })\r\n            .addMatcher(\r\n                (action) => {\r\n                    return action.type.endsWith('/fulfilled')\r\n                },\r\n                (state) => {\r\n                    state.status = RequestStatus.idle\r\n                })\r\n            .addMatcher(\r\n                (action) => {\r\n                    return action.type.includes(`auth/initializeApp`)\r\n                        && (action.meta.requestStatus === 'fulfilled' || action.meta.requestStatus === 'rejected')\r\n                },\r\n                (state) => {\r\n                    state.isInitialized = true\r\n                })\r\n\r\n    }\r\n})\r\nexport default slice.reducer\r\nexport const {setAppErrorAC, setAppStatusAC} = slice.actions\r\n\r\n\r\n","import {AppRootStateType} from \"app/store\";\r\n\r\nexport const selectError = (state:AppRootStateType) => state.app.error\r\nexport const selectInitialized = (state:AppRootStateType) => state.app.isInitialized\r\nexport const selectStatus = (state:AppRootStateType) => state.app.status","import React from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert'\r\nimport {useDispatch, useSelector} from 'react-redux'\r\nimport {setAppErrorAC, slice} from 'app/app-reducer'\r\nimport {selectError} from \"app/app.selectors\";\r\nimport {useActions} from \"../../hooks/useAction\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />\r\n}\r\n\r\nexport function ErrorSnackbar() {\r\n    const error = useSelector(selectError);\r\n    const {setAppErrorAC} = useActions(slice.actions)\r\n\r\n    const handleClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n        setAppErrorAC({error: null})\r\n    }\r\n\r\n    const isOpen = error !== null;\r\n\r\n    return (\r\n        <Snackbar open={isOpen} autoHideDuration={6000} onClose={handleClose}>\r\n            <Alert onClose={handleClose} severity=\"error\">\r\n                {error}\r\n            </Alert>\r\n        </Snackbar>\r\n    )\r\n}\r\n","import {ResponseDataType} from \"types/types\";\r\nimport {instance} from \"../../TodolistsList/Todolist/todokists.api.ts/todokists.api\";\r\n\r\n// api\r\nexport const authAPI = {\r\n    login(data: LoginParamsType) {\r\n        return instance.post<ResponseDataType<{ userId?: number }>>('auth/login', data);\r\n    },\r\n    logout() {\r\n        return instance.delete<ResponseDataType<{ userId?: number }>>('auth/login');\r\n    },\r\n    me() {\r\n        return instance.get<ResponseDataType<{ id: number; email: string; login: string }>>('auth/me');\r\n    }\r\n}\r\n\r\n//types\r\nexport type LoginParamsType = {\r\n    email: string\r\n    password: string\r\n    rememberMe: boolean\r\n    captcha?: string\r\n}\r\n","import {createSlice} from \"@reduxjs/toolkit\";\r\nimport {commonActions} from \"common/commonActions/commonActions\";\r\nimport {createAppAsyncThunk} from \"common/createAppAsyncThunk/createAppAsyncThunk\";\r\nimport {authAPI, LoginParamsType} from \"./auth.api.ts/auth.api\";\r\nimport {ResultCode} from \"enums/enums\";\r\n\r\n\r\nconst initializeApp = createAppAsyncThunk<{ isLoggedIn: boolean }, void>\r\n('auth/initializeApp', async (arg, {rejectWithValue, dispatch}) => {\r\n\r\n    const res = await authAPI.me()\r\n\r\n    if (res.data.resultCode === ResultCode.succeeded) {\r\n        return {isLoggedIn: true}\r\n    }\r\n    return rejectWithValue({value: null, showError: false})\r\n})\r\n\r\nconst login = createAppAsyncThunk<{ isLoggedIn: boolean }, LoginParamsType>\r\n('auth/login', async (arg, {rejectWithValue}) => {\r\n\r\n    const res = await authAPI.login(arg)\r\n    if (res.data.resultCode === ResultCode.succeeded) {\r\n        return {isLoggedIn: true}\r\n    } else {\r\n        return rejectWithValue(res.data)\r\n    }\r\n})\r\n\r\nconst logout = createAppAsyncThunk<{ isLoggedIn: boolean }, void>\r\n('auth/logout', async (arg, thunkAPI) => {\r\n\r\n    const {dispatch, rejectWithValue} = thunkAPI\r\n\r\n    const res = await authAPI.logout()\r\n    if (res.data.resultCode === ResultCode.succeeded) {\r\n        dispatch(commonActions())\r\n        return {isLoggedIn: false}\r\n    } else {\r\n        return rejectWithValue(null)\r\n    }\r\n\r\n})\r\nconst authInitialState = {\r\n    isLoggedIn: false\r\n}\r\n\r\nexport const slice = createSlice({\r\n    name: 'auth',\r\n    initialState: authInitialState,\r\n    reducers: {},\r\n    extraReducers: builder => {\r\n        builder\r\n            .addCase(initializeApp.fulfilled, (state, action) => {\r\n                state.isLoggedIn = action.payload.isLoggedIn\r\n            })\r\n            .addCase(login.fulfilled, (state, action) => {\r\n                state.isLoggedIn = action.payload.isLoggedIn\r\n            })\r\n            .addCase(logout.fulfilled, (state, action) => {\r\n                state.isLoggedIn = action.payload.isLoggedIn\r\n            })\r\n    }\r\n})\r\nexport default slice.reducer\r\nexport const authThunk = {initializeApp, login, logout}\r\n\r\n\r\n\r\n\r\n\r\n","import React, {FC} from 'react'\r\nimport {Checkbox, FormControl, FormControlLabel, FormGroup, FormLabel, TextField, Button, Grid} from '@material-ui/core'\r\nimport {FormikHelpers, useFormik} from 'formik'\r\nimport { useSelector} from 'react-redux'\r\nimport {selectAuth} from \"features/Login/auth.selectors\";\r\nimport {authThunk} from \"./auth-reducer\";\r\nimport {slice} from \"app/app-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {useActions} from \"hooks/useAction\";\r\nimport {FieldsErrorsType} from \"types/types\";\r\nimport {LoginParamsType} from \"./auth.api.ts/auth.api\";\r\n\r\n\r\ntype ErrorFieldsType = Partial<Omit<LoginParamsType, 'captcha' | 'rememberMe'>>\r\n\r\nexport const Login: FC = () => {\r\n\r\n    const isLoggedIn = useSelector(selectAuth)\r\n    const {login} = useActions(authThunk)\r\n    const {setAppErrorAC} = useActions(slice.actions)\r\n\r\n    const formik = useFormik({\r\n        validate: (values) => {\r\n            const errors: ErrorFieldsType = {}\r\n            if (!values.password) {\r\n                errors.password = 'Required'\r\n            } else if (values.password.length < 6) {\r\n                errors.password = 'Must be 6 characters or more'\r\n            }\r\n\r\n            if (!values.email) {\r\n                errors.email = 'Required'\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address'\r\n            }\r\n            return errors\r\n        },\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false\r\n        },\r\n\r\n        onSubmit: (values, formikHelpers: FormikHelpers<LoginParamsType>) => {\r\n            login(values)\r\n                .unwrap()\r\n                .catch(e => {\r\n                    const {fieldsErrors} = e as { fieldsErrors: FieldsErrorsType[] }\r\n                    if (e.message) {\r\n                        return\r\n                    }\r\n                    if (e.fieldsErrors.length) {\r\n                        fieldsErrors.forEach((el) => {\r\n                            formikHelpers.setFieldError(el.field, el.error)\r\n                        })\r\n                        return\r\n                    }\r\n                    setAppErrorAC({error: e.messages[0]})\r\n                })\r\n        },\r\n\r\n    })\r\n\r\n    if (isLoggedIn) {\r\n        return <Redirect to={\"/\"}/>\r\n    }\r\n\r\n    return <Grid container justify=\"center\">\r\n        <Grid item xs={4}>\r\n            <form onSubmit={formik.handleSubmit}>\r\n                <FormControl>\r\n                    <FormLabel>\r\n                        <p>\r\n                            To log in get registered <a href={'https://social-network.samuraijs.com/'}\r\n                                                        target={'_blank'}>here</a>\r\n                        </p>\r\n                        <p>\r\n                            or use common test account credentials:\r\n                        </p>\r\n                        <p> Email: free@samuraijs.com\r\n                        </p>\r\n                        <p>\r\n                            Password: free\r\n                        </p>\r\n                    </FormLabel>\r\n                    <FormGroup>\r\n                        <TextField\r\n                            label=\"Email\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"email\")}\r\n                        />\r\n                        {formik.touched.email && formik.errors.email ?\r\n                            <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                        <TextField\r\n                            type=\"password\"\r\n                            label=\"Password\"\r\n                            margin=\"normal\"\r\n                            {...formik.getFieldProps(\"password\")}\r\n                        />\r\n                        {formik.touched.password && formik.errors.password ?\r\n                            <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                        <FormControlLabel\r\n                            label={'Remember me'}\r\n                            control={<Checkbox\r\n                                {...formik.getFieldProps(\"rememberMe\")}\r\n                                checked={formik.values.rememberMe}\r\n                            />}\r\n                        />\r\n                        <Button type={'submit'} variant={'contained'} color={'primary'}>Login</Button>\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </form>\r\n        </Grid>\r\n    </Grid>\r\n}\r\n","import React, {FC, useEffect} from 'react'\r\nimport './App.css'\r\nimport {\r\n    AppBar,\r\n    Button,\r\n    CircularProgress,\r\n    Container,\r\n    IconButton,\r\n    LinearProgress,\r\n    Toolbar,\r\n    Typography\r\n} from '@material-ui/core'\r\nimport {Menu} from '@material-ui/icons'\r\nimport {TodolistsList} from 'features/TodolistsList/Todolist/TodolistsList'\r\nimport {ErrorSnackbar} from 'components/ErrorSnackbar/ErrorSnackbar'\r\nimport {useSelector} from 'react-redux'\r\nimport {BrowserRouter, Route} from 'react-router-dom'\r\nimport {Login} from 'features/Login/Login'\r\nimport {authThunk} from 'features/Login/auth-reducer'\r\nimport {selectAuth} from \"features/Login/auth.selectors\";\r\nimport {selectInitialized, selectStatus} from \"app/app.selectors\";\r\nimport {useActions} from \"hooks/useAction\";\r\n\r\n\r\ntype Props = {\r\n    demo?: boolean\r\n}\r\n\r\nexport const App: FC<Props> = ({demo = false}) => {\r\n    const status = useSelector(selectStatus)\r\n    const isInitialized = useSelector(selectInitialized)\r\n    const isLoggedIn = useSelector(selectAuth)\r\n    const {initializeApp, logout} = useActions(authThunk)\r\n\r\n\r\n    useEffect(() => {\r\n        initializeApp()\r\n    }, [])\r\n\r\n    const logoutHandler = () => logout()\r\n\r\n    if (!isInitialized) {\r\n        return <div\r\n            style={{position: 'fixed', top: '30%', textAlign: 'center', width: '100%'}}>\r\n            <CircularProgress/>\r\n        </div>\r\n    }\r\n\r\n    return (\r\n        <BrowserRouter>\r\n            <div className=\"App\">\r\n                <ErrorSnackbar/>\r\n                <AppBar position=\"static\">\r\n                    <Toolbar>\r\n                        <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\r\n                            <Menu/>\r\n                        </IconButton>\r\n                        <Typography variant=\"h6\">\r\n                            News\r\n                        </Typography>\r\n                        {isLoggedIn && <Button color=\"inherit\" onClick={logoutHandler}>Log out</Button>}\r\n                    </Toolbar>\r\n                    {status === 'loading' && <LinearProgress/>}\r\n                </AppBar>\r\n                <Container fixed >\r\n                    <Route exact path={'/'} render={() => <TodolistsList demo={demo}/>}/>\r\n                    <Route path={'/login'} render={() => <Login/>}/>\r\n                </Container>\r\n            </div>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\n","import {tasksReducer} from 'features/TodolistsList/tasks/tasks-reducer';\r\nimport {todolistsReducer} from 'features/TodolistsList/Todolist/todolists-reducer';\r\nimport {AnyAction, combineReducers} from 'redux'\r\nimport appReducer from './app-reducer'\r\nimport authReducer from 'features/Login/auth-reducer'\r\nimport {configureStore} from \"@reduxjs/toolkit\";\r\nimport {ThunkAction} from 'redux-thunk'\r\n\r\nconst rootReducer = combineReducers({\r\n    tasks: tasksReducer,\r\n    todolists: todolistsReducer,\r\n    app: appReducer,\r\n    auth: authReducer\r\n})\r\n\r\nexport const store = configureStore({\r\n    reducer: rootReducer\r\n})\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\nexport type AppDispatch = typeof store.dispatch\r\nexport type AppThunk<ReturnType = void> = ThunkAction<ReturnType,\r\n    AppRootStateType,\r\n    unknown,\r\n    AnyAction>\r\n// @ts-ignore\r\nwindow.store = store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {App} from './app/App';\r\nimport {store} from 'app/store';\r\nimport {Provider} from 'react-redux';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App/>\r\n    </Provider>, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"isDone\":\"task_isDone__3kL2m\"};"],"sourceRoot":""}